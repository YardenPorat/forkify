(()=>{"use strict";class e{constructor(e){this.query=e}async getResults(){try{const e=await fetch(`https://forkify-api.herokuapp.com/api/search?q=${this.query}`),s=await e.json();this.result=s.recipes}catch(e){e.message.includes(400)?alert("Nothing found. Try searching for something else, like pizza"):alert(e)}}}class s{constructor(){this.items=[]}addItem(e,s,t){const n={count:e,unit:s,ingredient:t,id:Math.random().toString(36)};return this.items.push(n),n}deleteItem(e){const s=this.items.findIndex((s=>s.id===e));this.items.splice(s,1)}updateCount(e,s){this.items.find((s=>s.id===e)).count=s}}class t{constructor(){this.likes=[]}addLike(e,s,t,n){const i={id:e,title:s,author:t,img:n};return this.likes.push(i),this.persisData(),i}deleteLike(e){const s=this.likes.findIndex((s=>s.id===e));this.likes.splice(s,1),this.persisData()}isLiked(e){return-1!==this.likes.findIndex((s=>s.id===e))}getNumLikes(){return this.likes.length}persisData(){localStorage.setItem("likes",JSON.stringify(this.likes))}readStorage(){const e=JSON.parse(localStorage.getItem("likes"));e&&(this.likes=e)}}const n={searchForm:document.querySelector(".search"),searchInput:document.querySelector(".search__field"),recipeList:document.querySelector(".results__list"),searchResContainer:document.querySelector(".results"),searchResPages:document.querySelector(".results__pages"),recipe:document.querySelector(".recipe"),shopping:document.querySelector(".shopping__list")},i="loader",c=e=>{const s=`\n     <div class="${i}">\n        <svg>\n            <use href="img/icons.svg#icon-cw"></use>\n        </svg>\n     </div>\n     `;e.insertAdjacentHTML("afterbegin",s)},r=()=>{const e=document.querySelector(`.${i}`);e&&e.parentElement.removeChild(e)},a=()=>{n.recipeList.innerHTML="",n.searchResPages.innerHTML=""},o=(e,s=17)=>{const t=[];return(e=e.replace(/-/g," ")).length>s?(e.split(" ").reduce(((e,n)=>(e+n.length<=s&&t.push(n),e+n.length)),0),`${t.join(" ")}...`):e},l=e=>{e.title=o(e.title);const s=`\n                <li>\n                    <a class="results__link" href="#${e.recipe_id}">\n                        <figure class="results__fig">\n                            <img src="${e.image_url}" alt="${e.title}">\n                        </figure>\n                        <div class="results__data">\n                            <h4 class="results__name">${e.title}</h4>\n                            <p class="results__author">${e.publisher}</p>\n                        </div>\n                    </a>\n                </li>\n    `;n.recipeList.insertAdjacentHTML("beforeend",s)},p=(e,s)=>`\n    <button class="btn-inline results__btn--${s}" data-goto=${"prev"===s?e-1:e+1}>\n        <svg class="search__icon">\n            <use href="img/icons.svg#icon-triangle-${"prev"===s?"left":"right"}"></use>\n        </svg>\n        <span>Page ${"prev"===s?e-1:e+1}</span>\n    </button>\n`,u=(e,s=1,t=10)=>{a();const i=(s-1)*t,c=s*t;e.slice(i,c).forEach(l),((e,s,t)=>{const i=Math.ceil(s/t);let c;1===e&&i>1?c=p(e,"next"):e<i?c=`\n        ${p(e,"next")}\n        ${p(e,"prev")}`:e===i&&i>1&&(c=p(e,"prev")),n.searchResPages.insertAdjacentHTML("afterbegin",c)})(s,e.length,t)},d=e=>{document.querySelector(".recipe__info-data--people").textContent=e.servings,document.querySelector(".recipe__info-data--minutes").textContent=e.time,Array.from(document.querySelectorAll(".recipe__count")).forEach(((s,t)=>{s.textContent=e.ingredients[t].count}))},g=e=>{const s=e?"icon-heart":"icon-heart-outlined";document.querySelector(".recipe__love use").setAttribute("href",`img/icons.svg#${s}`)},h=e=>{document.querySelector(".likes").style.visibility=0==e?"hidden":"visible"},_=e=>{e.title=o(e.title);const s=`\n    <li>\n        <a class="likes__link" href="#${e.id}">\n            <figure class="likes__fig">\n                <img src="${e.img}" alt="${e.title}">\n            </figure>\n            <div class="likes__data">\n                <h4 class="likes__name">${e.title}</h4>\n                <p class="likes__author">${e.author}</p>\n            </div>\n        </a>\n    </li>\n    `;document.querySelector(".likes__list").insertAdjacentHTML("beforeend",s)};class m{constructor(e){this.id=e}async getRecipe(){try{const e=await fetch(`https://forkify-api.herokuapp.com/api/get?rId=${this.id}`),s=await e.json();this.title=s.recipe.title,this.author=s.recipe.publisher,this.img=s.recipe.image_url,this.ingredients=s.recipe.ingredients,this.url=s.recipe.source_url}catch(e){console.log("something wen't wrong: "+e)}}calcTime(){const e=this.ingredients.length,s=Math.ceil(e/3);this.time=15*s}calcServings(){this.servings=4}parseIngredients(){const e=["tablespoons","tablespoon","whole medium","whole","ounces","ounce","cups","pounds","teaspoons","teaspoon","package"],s=["tbs","tbs","","","oz","oz","cup","pound","tsp","tsp","pack"],t=["1/4"," 3/4"," 1/2","1/2",","],n=[".25",".75",".5","0.5",""],i=["butter cup","____"],c=["for the","____"];let r=this.ingredients;console.log(r),r=r.filter((e=>!c.some((s=>e.toLowerCase().includes(s))))),r=r.map((c=>{let r=c.toLowerCase();e.forEach(((e,t)=>{r=r.replace(e,s[t])})),t.forEach(((e,s)=>{r=r.replace(e,n[s])})),r=r.replace(/ *\([^)]*\) */g," ").trim();const a=r.split(" ");let o,l;return o=i.some((e=>r.includes(e)))?-1:a.findIndex((e=>s.includes(e))),o>-1?l={count:parseFloat(a.slice(0,o).join(" "))||1,unit:a[o],ingredient:a.slice(2).join(" ")}:isNaN(a[0])?-1===o&&(l={count:1,unit:"",ingredient:r}):l={count:parseFloat(a[0]),unit:"",ingredient:a.slice(1).join(" ")},l})),this.ingredients=r}updateServings(e){const s="dec"===e?this.servings-1:this.servings+1;this.ingredients.forEach((e=>{e.count=Math.round(100*(e.count*(s/this.servings)+Number.EPSILON))/100})),this.time=Math.round(this.time*(s/this.servings)),this.servings=s}}const v={};window.state=v;n.searchForm.addEventListener("submit",(s=>{s.preventDefault(),(async()=>{const s=n.searchInput.value;if(console.log(`looking for: ${s}`),s){v.search=new e(s),n.searchInput.value="",a(),c(n.searchResContainer);try{await v.search.getResults(),r(),u(v.search.result)}catch(e){console.log("some error with the search:"+e),r()}}})()})),n.searchResPages.addEventListener("click",(e=>{const s=e.target.closest(".btn-inline").dataset.goto;s&&(console.log("Going to page:"+s),u(v.search.result,parseInt(s,10)))})),new e("pasta").getResults();const f=async()=>{const e=window.location.hash.replace("#","");if(e){n.recipe.innerHTML="",c(n.recipe),v.search&&(e=>{Array.from(document.querySelectorAll(".results__link--active")).forEach((e=>e.classList.remove("results__link--active"))),document.querySelector(`.results__link[href="#${e}"]`).classList.add("results__link--active")})(e),v.recipe=new m(e);try{await v.recipe.getRecipe(),v.recipe.parseIngredients(),v.recipe.calcTime(),v.recipe.calcServings(),r(),((e,s)=>{const t=`\n    <figure class="recipe__fig">\n                <img src="${e.img}" alt="${e.title}" class="recipe__img">\n                <h1 class="recipe__title">\n                    <span>${e.title}</span>\n                </h1>\n            </figure>\n            \n            <div class="recipe__details">\n                <div class="recipe__info">\n                    <svg class="recipe__info-icon">\n                        <use href="img/icons.svg#icon-stopwatch"></use>\n                    </svg>\n                    <span class="recipe__info-data recipe__info-data--minutes">${e.time}</span>\n                    <span class="recipe__info-text"> minutes</span>\n                </div>\n                <div class="recipe__info">\n                    <svg class="recipe__info-icon">\n                        <use href="img/icons.svg#icon-man"></use>\n                    </svg>\n                    <span class="recipe__info-data recipe__info-data--people">${e.servings}</span>\n                    <span class="recipe__info-text"> servings</span>\n\n                    <div class="recipe__info-buttons">\n                        <button class="btn-tiny btn-decrease">\n                            <svg>\n                                <use href="img/icons.svg#icon-circle-with-minus"></use>\n                            </svg>\n                        </button>\n                        <button class="btn-tiny btn-increase">\n                            <svg>\n                                <use href="img/icons.svg#icon-circle-with-plus"></use>\n                            </svg>\n                        </button>\n                    </div>\n\n                </div>\n                <button class="recipe__love">\n                    <svg class="header__likes">\n                        <use href="img/icons.svg#icon-heart${s?"":"-outlined"}"></use>\n                    </svg>\n                </button>\n            </div>\n\n\n\n            <div class="recipe__ingredients">\n                <ul class="recipe__ingredient-list">\n                    ${e.ingredients.map((e=>{return`\n    <li class="recipe__item">\n        <svg class="recipe__icon">\n            <use href="img/icons.svg#icon-check"></use>\n        </svg>\n        <div class="recipe__count">${(s=e).count}</div>\n\n        <div class="recipe__ingredient">\n            <span class="recipe__unit">${s.unit}</span>\n            ${s.ingredient}\n        </div>\n    </li>\n`;var s})).join("")}\n                </ul>\n\n                <button class="btn-small recipe__btn recipe__btn--add">\n                    <svg class="search__icon">\n                        <use href="img/icons.svg#icon-shopping-cart"></use>\n                    </svg>\n                    <span>Add to shopping list</span>\n                </button>\n            </div>\n\n            <div class="recipe__directions">\n                <h2 class="heading-2">How to cook it</h2>\n                <p class="recipe__directions-text">\n                    This recipe was carefully designed and tested by\n                    <span class="recipe__by">${e.author}</span>. Please check out directions at their website.\n                </p>\n                <a class="btn-small recipe__btn" href="${e.url}" target="_blank">\n                    <span>Directions</span>\n                    <svg class="search__icon">\n                        <use href="img/icons.svg#icon-triangle-right"></use>\n                    </svg>\n\n                </a>\n            </div>\n    `;n.recipe.insertAdjacentHTML("afterbegin",t)})(v.recipe,v.likes.isLiked(e))}catch(e){console.log(e)}}};["hashchange","load"].forEach((e=>window.addEventListener(e,f)));n.shopping.addEventListener("click",(e=>{const s=e.target.closest(".shopping__item").dataset.itemid;if(e.target.matches(".shopping__delete, .shopping__delete *"))v.list.deleteItem(s),(e=>{console.log(e);const s=document.querySelector(`[data-itemid=${e}]`);s&&s.parentElement.removeChild(s)})(s);else if(e.target.matches(".shopping__count-value")){const t=parseFloat(e.target.value);v.list.updateCount(s,t)}})),window.addEventListener("load",(()=>{v.likes=new t,v.likes.readStorage(),h(v.likes.getNumLikes()),v.likes.likes.forEach((e=>_(e)))})),n.recipe.addEventListener("click",(e=>{v.recipe&&(e.target.matches(".btn-decrease, .btn-decrease *")?v.recipe.servings>1&&(v.recipe.updateServings("dec"),d(v.recipe)):e.target.matches(".btn-increase, .btn-increase *")?(v.recipe.updateServings("inc"),d(v.recipe)):e.target.matches(".recipe__btn--add, .recipe__btn--add *")?(v.list||(v.list=new s),v.recipe.ingredients.forEach((e=>{(e=>{const s=`\n                <li class="shopping__item" data-itemid=${e.id}>\n                    <div class="shopping__count">\n                        <input type="number" value="${e.count}" step="${e.count}" class="shopping__count-value">\n                        <p>${e.unit}</p>\n                    </div>\n                    <p class="shopping__description">${e.ingredient}</p>\n                    <button class="shopping__delete btn-tiny">\n                        <svg>\n                            <use href="img/icons.svg#icon-circle-with-cross"></use>\n                        </svg>\n                    </button>\n                </li>\n    `;n.shopping.insertAdjacentHTML("beforeend",s)})(v.list.addItem(e.count,e.unit,e.ingredient))}))):e.target.matches(".recipe__love, .recipe__love *")&&(()=>{v.likes||(v.likes=new t);const e=v.recipe.id;if(v.likes.isLiked(e))v.likes.deleteLike(e),g(!1),(e=>{const s=document.querySelector(`.likes__link[href="#${e}"]`);s&&s.parentElement.parentElement.removeChild(s.parentElement)})(e),console.log(v.likes);else{const s=v.likes.addLike(e,v.recipe.title,v.recipe.author,v.recipe.img);g(!0),_(s),console.log(v.likes)}h(v.likes.getNumLikes())})())})),window.l=new s})();
//# sourceMappingURL=bundle.js.map